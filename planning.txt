Space Match 3000 planning

next work on the code refactoring and if a few small improvments come from it that is fine, but for
    now the goal is not to add much functionality to the game. There may be some things like menu
    navigation that come out, but this will be a minor update as far as game changes.

new functionality for future versions----------------------------------

- must not be allowed to get a high score with 0
- make the time count down instead of up
- Before any more versions there needs to be a heavy refactoring to make it easier to
    add new functionality and make the code much easier to understand etc.
- add no refill mode, needs the match checking function below to work the best
- add a credits screen
- add the ability to save a game for later. especially important for endless
    could just be the ability to resume the last played game.
- sound. use some cool space sounds if you can find or make them.
- add animation for items breaking that can maybe make it a little easier to see
    what is happening. or at the very least add color to the match scores area. or even
    put the item picture by it, or come up with a way to instead of showing the score only
    actually show the match in an animation with the score on the side.
- checks for the board need to happen only if they need to rather than every game cycle. it isn't
    a huge number of checks overall but it is a lot to do if they dont need to happen
- render the main menu hard coded instead of the loop for any menu method. this way it can
    have a better look for the difficulty and mode
- also try and find a way that the score screen changing the mode and difficulty does not
    change what it will be for a new game
- think about spicing up end screen with a few more stats or combining it with the name screen if you
    have a high score
- dont let people save high scores that are 0. maybe even have an option for not adding your score.
- remove the escape key from the valid keys



--- Refactoring thoughts ---------------------------------------------------

- breaking the main file up into functions is important
    - all the view stuff sill be easy because it is mostly just draw calls. that way
        each screen can have its own draw function that will be called when that screen
        is up.
- I think the classes should be reworked a bit. probably the small ones are fine without
    being defined overly well, but the board could use a little focus tightening, probably
    resulting in a game class that can hold some of the values for the game. this way the
    game can be created with new game and the state of the board can be independant. like
    the board can be made new when it runs out of moves or something like that instead of
    ending the game or having a function to randomize it again. It may even be possible to
    try to create a board class that is seperate from a match 3 game and could be used more
    with other games to. then a match 3 board could be made that would use the board or even
    inherit from it.
- really the biggest thing is getting a few of the global variables out of there and simplifying
    each section of the program by breaking it down into more generic chuncks rather than it all
    being mixed up like it is now.
- maybe now is the time to actually plan out what each peice should do since I now know all the
    things I want it to do
- change the menu display to be less generic. for now just show the main menu how you want it to be.
    could even mean displaying the difficulty and mode behind the menu items so that they are right
    where they should be.
- consider making a gameState an object that can have methods that change states etc. could even have
    functions for the drawing of the game state. perhaps if all game states were stored in a table
    then changing to a new one could mean that polymorphism could allow the main file to have
    very little in it
- Use the class.lua file in your lua.lib file to help to create new classes
    easily. it is really just a way to save a little typing and guarantee that
    all of your classes follow the same format for constructors and can have
    constructor calls by just typing Class(args).
- the game title for saving and score filename should be stored in variables that can be easily changed
    and update properly. also the game version should be added to the string for the identity
    of the game so that when its folder is created in the love folder it should create new
    data files for each version in case they are not compatible with previous ones
- Try to create smaller classes that do more specific things. Then build bigger ones with composition.
- the way the game works for navigating is not intuitive to everyone. building in buttons to click
    would make it easier for some people. also it could work to make the menus navigable with the
    arrow keys and have a highlight on a menu item so you could press enter and do the selected
    action.
- try breaking as many things up into functions as you can and also try to work on any deep nesting
    of loops and conditionals that you have. either by splitting some of the logic into functions or
    by reworking it. I dont think you have done too bad here but could always use some work.
- try to rework the loop for checking for matches in the same way that the hint method works. so you
    can check both rows and columns at the same time. break the logic up into some functions to
    make it cleaner. This algorithm is identical except it loops through the columns on one and the
    rows on the other. probably it could be broken out into the logic for one check and have the
    loop come outside that function?
- modes like no refil, dynamic update(puzzle quest style), normal. could replace the modes and the limit
    could be replaced by a limit object. Mode would then be a state that had the game or gameboard as its
    context maybe? or at least the gameState would have to call mode specific click and update methods
    for the running of the game. Would be very cool I think to get this availability so that
    I could make the game a little more interesting.


Refactoring specifics------------------------------------------------------

Go through the source and find as many of the global and unclassed variables as you can and try to
    record them and see where they could best be placed. Find any logic that could be moved into
    a class or at least a function and do it.

Existing elements
- global variables:
    state, gameMode, gameDifficulty

Possible new classes to incorprate other elements
- class - for making all the other classes work like classes
- gameState
- mode
- menu
- button
- screen
- board
- match3 game
- block (what I called an item before)
- better animations

-- Classes and Apis-------------------------------
App(info)
- fields
    - info
    - windowDimensions
    - game
    - state

- methods
    - changeState(newState)

State(app)
- Fields
    - app
    - screen
    - menu
    - gameSettingsFactory -- to create a game settings object

-Methods
    - update(dt)
    - draw()
    - mousePressed(x, y, button)
    - keyPressed(key)

Screen(app)
- fields
    - app
    - mainScreenArea
    -- Subclasses may declare other Screen areas

- Methods
    - draw()

Game(gameSettings)
- Feilds
    - gameSettings
    - gameBoard
    - isOver
    - wasMoveMade
    - shouldCheckForMatches
    - score

- Methods
    

Match3Board(rows, columns, numColors)
- Fields
    - rows
    - columns
    - numColors
    - board

- Methods
    - setNew()
    - getMatches()
    - refill(refillDirection) - returns positions of blocks that are moving
    - HasMove() - returns a position of a block with a possible move
    - switchBlocks(block1, block2)
    - isBlockMatched(block)